generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  userNum      Int?
  credit       String   @unique
  name         String   
  info         String?
  note         String?  @db.Text
  image        String
  cover        String?
  memos        Memo[]
  bookmarks    BookMark[]
  favorites    Favorite[]
  sanders      Notification[]  @relation("sander")
  recipients   Notification[]  @relation("recipient")
  followers    Follow[] @relation("follower")
  followings   Follow[] @relation("following")
  createdAt    DateTime @default(now())
}

model Follow {
  followerId   Int
  followingId  Int
  follower     User @relation("follower", fields: [followerId], references: [id])
  following    User @relation("following", fields: [followingId], references: [id])
  @@id([followerId, followingId])
}


model Memo {
  id             Int        @id @default(autoincrement())
  content        String
  decos          Deco[] 
  images         Image[]
  bookmarks      BookMark[]
  favorites      Favorite[]
  notifications  Notification[]
  leafs          Memo[]     @relation("Thread")
  titleId        Int?
  title          Memo?      @relation("Thread", fields: [titleId], references: [id],onDelete: Cascade)
  user           User       @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId         Int
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}



enum Kind {
  subtext
  folder
  secret
}

model Deco {
  id           Int        @id @default(autoincrement())
  kind         Kind
  extra        String     
  memoId       Int
  memo         Memo       @relation(fields: [memoId],references: [id],onDelete: Cascade)
}


model Image {
  id           Int        @id @default(autoincrement())
  url          String
  alt          String
  memoId       Int
  memo         Memo       @relation(fields: [memoId],references: [id],onDelete: Cascade)
  createdAt    DateTime   @default(now())
}



model Favorite {
  id           Int        @id @default(autoincrement())
  userId       Int
  memoId       Int
  user         User       @relation(fields: [userId],references: [id],onDelete: Cascade)
  memo         Memo       @relation(fields: [memoId],references: [id],onDelete: Cascade)
  createdAt    DateTime   @default(now())
  @@unique([userId, memoId])
}

model BookMark {
  id           Int        @id @default(autoincrement())
  userId       Int
  memoId       Int
  user         User       @relation(fields: [userId],references: [id],onDelete: Cascade)
  memo         Memo       @relation(fields: [memoId],references: [id],onDelete: Cascade)
  createdAt    DateTime   @default(now())
  @@unique([userId, memoId])
}

enum Aria {
  comment
  follow
  favorite
}

model Notification{
  id           Int        @id @default(autoincrement())
  aria         Aria
  sanderId     Int
  recipientId  Int
  memoId       Int?
  memo         Memo?       @relation(fields: [memoId], references: [id],onDelete: Cascade)
  sander       User       @relation("sander", fields: [sanderId], references: [id])
  recipient    User       @relation("recipient", fields: [recipientId], references: [id])
  createdAt    DateTime   @default(now())

}

