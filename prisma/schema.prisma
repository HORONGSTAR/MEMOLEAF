generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  userNum      Int?
  credit       String   @unique
  name         String   @db.VarChar(10)
  image        String
  info         String?
  memos        Memo[]
  comments     Comment[]
  bookmarks    BookMark[]
  fromUsers    Follow[] @relation("fromUser")
  toUsers      Follow[] @relation("toUser")
  createdAt    DateTime @default(now())
}

model Follow {
  fromUserId   Int
  toUserId     Int
  fromUser     User @relation("fromUser", fields: [fromUserId], references: [id])
  toUser       User @relation("toUser", fields: [toUserId], references: [id])
  @@id([toUserId, fromUserId])
}


model Memo {
  id           Int        @id @default(autoincrement())
  content      String
  leafs        Memo[]     @relation("Thread")
  decos        Deco[] 
  images       Image[]
  comments     Comment[]
  bookmarks    BookMark[]
  userId       Int
  parentId     Int?
  user         User       @relation(fields: [userId],references: [id],onDelete: Cascade)
  parent       Memo?      @relation("Thread", fields: [parentId], references: [id],onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}



enum Kind {
  subtext
  folder
  secret
}

model Deco {
  id           Int        @id @default(autoincrement())
  kind         Kind
  extra        String     @db.VarChar(60)
  memoId       Int
  memo         Memo       @relation(fields: [memoId],references: [id],onDelete: Cascade)
}


model Image {
  id           Int        @id @default(autoincrement())
  url          String
  alt          String
  memoId       Int
  memo         Memo       @relation(fields: [memoId],references: [id],onDelete: Cascade)
  createdAt    DateTime   @default(now())
}

model Comment{
  id           Int        @id @default(autoincrement())
  text         String
  userId       Int
  memoId       Int
  memo         Memo       @relation(fields: [memoId],references: [id],onDelete: Cascade)
  user         User       @relation(fields: [userId],references: [id],onDelete: Cascade)
  createdAt    DateTime   @default(now())
}

model BookMark {
  id           Int        @id @default(autoincrement())
  userId       Int
  memoId       Int
  user         User       @relation(fields: [userId],references: [id],onDelete: Cascade)
  memo         Memo       @relation(fields: [memoId],references: [id],onDelete: Cascade)
  createdAt    DateTime   @default(now())
}

enum Aria {
  replies
  follow
  bookmark
}

model Alarm{
  id           Int        @id @default(autoincrement())
  aria         Aria
  link         Int
}

